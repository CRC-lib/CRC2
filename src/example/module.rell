namespace crc2 {
    import lib.crc2.tokens;
    import lib.crc2.balances;
    import lib.crc2.transfers;
    import lib.crc2.history;
    import lib.crc2.metadata;
}

namespace ft4 {
    import lib.ft4.accounts;
    import lib.ft4.auth;
}

entity planet {
    key name: text;
    image_url: text;
}

entity plot {
    key crc2.tokens.token;
    name: text;
    planet;
    coordinates: text;
    mutable digs: integer = 0;
}

entity sword {
    key crc2.tokens.token;
    name: text;
    image_url: text;
    type: text;
    damage: integer;
    speed: integer;
}

function create_plot(planet_name: text, name: text, coordinates: text) {
    val token = crc2.balances.create_nft((planet_name + coordinates).hash());
    create plot (token, name, planet @{ .name == planet_name }, coordinates);
}

function create_sword(name: text, image_url: text, type: text, damage: integer, speed: integer) {
    val token = crc2.balances.create_fungible((name + type).hash());
    create sword (token, name, image_url, type, damage, speed);
}

function equip_sword(ft4.accounts.account, crc2.tokens.token) {
    crc2.balances.mint(token, account, 1L);
}

@extend(crc2.metadata.add_metadata)
function (crc2.tokens.token, metadata: map<text, gtv>) {
    val plot = plot @? { token } ($.to_struct());
    if (empty(plot)) return metadata;

    metadata.put("name", plot.name.to_gtv());
    metadata.put("planet", plot.planet.name.to_gtv());
    metadata.put("coordinates", plot.coordinates.to_gtv());
    metadata.put("digs", plot.digs.to_gtv());

    return metadata;
}