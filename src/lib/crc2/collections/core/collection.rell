entity collection {
    key id: byte_array;
    mutable name: text;
}

entity collection_token {
    index collection;
    key token;
}

function create_collection(name: text) {
    return create collection ( id = name.hash(), name );
}

function get_collection(collection_id: byte_array) {
    return require(collection @? { .id == collection_id }, "Collection with id %s not found".format(collection_id));
}

function get_collection_by_name(name: text) {
    val collections = collection @* { .name == name };
    require(collections.size() == 1, "Unique collection with name %s not found".format(name));
    return collections[0];
}

function add_token_to_collection(collection: collection, token) {
    return create collection_token ( collection, token );
}

function get_tokens_by_collection(collection) {
    return collection_token @* { collection } ( .token );
}
function _get_tokens_by_collection_name_paginated(collection_name: text, page_size: integer?, page_cursor: text?): list<ft4.utils.pagination_result> {
    val before_rowid = ft4.utils.before_rowid(page_cursor);
    return collection_token @* { get_collection_by_name(collection_name) } (
        ft4.utils.pagination_result(
            data = (
                token = .token,
            ).to_gtv_pretty(),
            rowid = .rowid
        )
    ) limit ft4.utils.fetch_data_size(page_size);
}
function get_account_balances_by_collection(collection, account: ft4.accounts.account) {
    val tokens = get_tokens_by_collection(collection);
   return balance @* { account, .token in tokens } ( token = .token, amount = .amount );
}
function is_token_in_collection(token, collection) : boolean {
    return collection_token @? { token, collection } != null;
}