@extend(cutp.get_cutp_features)
function (): list<text> {
    return list<text>([basic_v1.CUTP_LIST_OWNERS, basic_v1.CUTP_LIST_ADDRESS_TOKENS]);
}

@extend(basic_v1.cutp_impl_balance)
function (proto: text, address: text, token_id: text): decimal? {
    if (proto != cutp.CRC) {
        return null;
    }

    val account = ft4.accounts.Account(cutp.parse_account(address));
    val asset = tokens.get_token(cutp.parse_token_id(token_id));
    return get_account_balance(account, asset);
}

@extend(basic_v1.cutp_impl_list_owners)
function (proto: text, token_id: text, cursor: text?): ft4.utils.paged_result? {
    if (proto != cutp.CRC) {
        return null;
    }

    val token = tokens.get_token(cutp.parse_token_id(token_id));
    return ft4.utils.make_page(get_token_balances(token, null, cursor), null);
}

@extend(basic_v1.cutp_impl_list_address_tokens)
function (
    proto: text,
    address: text,
    criteria: map<text, text>,
    cursor: text?
): ft4.utils.paged_result? {
    if (proto != cutp.CRC) {
        return null;
    }

    val account = ft4.accounts.Account(cutp.parse_account(address));
    return ft4.utils.make_page(get_account_balances(account.id, null, cursor), null);
}
