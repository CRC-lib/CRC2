
val ZERO_ID = byte_array.from_hex("00".repeat(32));

@log
entity transfer_data {
    op_index: integer = op_context.op_index;
    index transaction, op_index;
    index from_id: byte_array;
    index to_id: byte_array;
    index token;
    amount: big_integer;
}

@extend(after_transfer)
function (from: ft4.accounts.account, to: ft4.accounts.account, token: token, amount: big_integer) {
    create transfer_data (
        from_id = from.id,
        to_id = to.id,
        token = token,
        amount = amount,
    );
}

@extend(after_mint)
function (account: ft4.accounts.account, token: token, amount: big_integer) {
    create transfer_data (
        from_id = ZERO_ID,
        to_id = account.id,
        token = token,
        amount = amount
    );
}

@extend(after_burn)
function (account: ft4.accounts.account, token: token, amount: big_integer) {
    create transfer_data (
        from_id = account.id,
        to_id = ZERO_ID,
        token = token,
        amount = amount
    );
}

function get_transfer_history(account_id: byte_array) {
    return transfer_data @* { .from_id == account_id  or .to_id == account_id };
}