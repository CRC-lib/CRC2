val MAX_TOKEN_AMOUNT = big_integer.from_hex("ff".repeat(32));

entity token_supply {
    key token;
    mutable max: big_integer = MAX_TOKEN_AMOUNT;
    mutable total: big_integer = 0L;
}

entity balance {
    key token, ft4.accounts.account;
    mutable amount: big_integer;
}

function create_fungible(id: byte_array, max_supply: big_integer = MAX_TOKEN_AMOUNT) {
    val token = create_token(id);
    create token_supply ( token, max = max_supply );
    return token;
}

function create_nft(id: byte_array) {
    val token = create_token(id);
    create token_supply ( token, max = 1L );
    return token;
}

function create_and_mint_fungible(
    id: byte_array,
    max_supply: big_integer,
    account: ft4.accounts.account,
    amount: big_integer
) {
    val token = create_fungible(id, max_supply);
    mint(token, account, amount);
    return token;
}

function create_and_mint_nft(id: byte_array, account: ft4.accounts.account) {
    val token = create_nft(id);
    mint(token, account, 1L);
    return token;
}

function mint(token, account: ft4.accounts.account, amount: big_integer) {

    val token_supply = ensure_token_supply(token);

    require(token_supply.total + amount <= token_supply.max, "Token supply overflow");
    before_mint(account, token, amount);

    _increase_balance(token, account, amount);
    token_supply.total += amount;

    after_mint(account, token, amount);
}

function burn(token: token, account: ft4.accounts.account, amount: big_integer) {

    val token_supply = require(token_supply @? { token }, "Token supply does not exist");

    require(token_supply.total >= amount, "Token supply underflow");

    before_burn(account, token, amount);

    _deduct_balance(token, account, amount);
    token_supply.total -= amount;

    after_burn(account, token, amount);
}

function _increase_balance(token, account: ft4.accounts.account, amount: big_integer) {
    require(amount > 0L, "Amount must be positive");
    val balance = balance @? { token, account };
    if (exists(balance)) {
        balance.amount += amount;
    } else {
        create balance ( token, account, amount );
    }
}

function _deduct_balance(token, account: ft4.accounts.account, amount: big_integer) {
    require(amount > 0L, "Amount must be positive");
    val balance = balance @? { token, account };
    require(balance, "Account %s does not have a balance for token %s".format(account.id, token.id));
    require(balance.amount >= amount, "Insufficient balance");

    balance.amount -= amount;
    if (balance.amount == 0L) {
        delete balance;
    }
}

function _get_account_balance(ft4.accounts.account, token): big_integer {
    return balance @? { token, account } ( .amount ) ?: 0L;
}

function _get_account_balances(
    account_id: byte_array,
    page_size: integer?,
    page_cursor: text?
): list<ft4.utils.pagination_result> {
    val before_rowid = ft4.utils.before_rowid(page_cursor);
    return balance @* {
        .account.id == account_id,
        .rowid > (before_rowid ?: rowid(0))
    } (
        ft4.utils.pagination_result(
            data = (
                asset = .token.id,
                amount = .amount
            ).to_gtv_pretty(),
            rowid = .rowid
        )
    ) limit ft4.utils.fetch_data_size(page_size);
}

function _get_token_balances(
    token: token,
    page_size: integer?,
    page_cursor: text?
): list<ft4.utils.pagination_result> {
    val before_rowid = ft4.utils.before_rowid(page_cursor);
    return balance @* {
        .token.id == token.id,
        .rowid > (before_rowid ?: rowid(0))
    } (
        ft4.utils.pagination_result(
            data = (
                account = .account.id,
                amount = .amount
            ).to_gtv_pretty(),
            rowid = .rowid
        )
    ) limit ft4.utils.fetch_data_size(page_size);
}

function get_total_supply(token): big_integer {
    return token_supply @? { token } ( .total ) ?: 0L;
}

function get_max_supply(token): big_integer {
    return require(token_supply @? { token } ( .max ), "Token supply does not exist");
}

function is_nft(token): boolean {
    return get_max_supply(token) == 1L;
}

function _get_nft_owner(token): ft4.accounts.account? {
    val token_supply = require(token_supply @? { token } ( $.to_struct() ), "Token supply does not exist");
    require(token_supply.max == 1L and token_supply.total <= 1L, "Token is not non-fungible");
    return balance @? { token } ( .account );
}

function ensure_token_supply(token) {
    return token_supply @? { token } ?: create token_supply ( token );
}
